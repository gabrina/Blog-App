[2025-08-26]
-configured Apollo as the website recommended
-creating .env file to keep the source API separated from the rest of the app
(the point of .env file is to keep some data secure, like keys and stuff, and it's in git ignore list, so it won't be pushed into git repository)
-sending a test query to get data from Hygraph
-installing Material UI:
npm install @mui/material @emotion/react @emotion/styled
npm install @mui/icons-material
-import desired elements to create App Bar, and creating it
-changing the default font and direction of the app via theme.js
-apply the changed theme by importing the theme into index.js and wrap the app with themeProvider
-adding persian fonts to the project,by
1- defining the fonts in fonts.css
2- declaring the default font in index.css
3- overwriting the default font of mui YekanBakh

[2025-08-27]
Episode 297:
-working with grid to set up the main page:
note: the griding method mentioned in the videos doesn't working:
->a Grid with property "container" that wraps all items.
->every child is a Grid component ith the property "item".
->define the width on different sizes by passing an object to the property "size":
size={{ xs: 12, md: 9 }}
note:every unit of Material UI is 8px;
for example: padding:{3} equals to 24 px

Episode298:
-defining layout:
->defining Footer.js
->we already defined Header.js
->defining Layout.js to have a single component that wraps the whole thing

small irrelevant note: when we define multiple index.js in every folder, when we want to import that file, we cam omit the file name.

Episode 299:
fetching the blogs data using graphql and for npw, logging them in console.
note: import useQuery from @Apollo/client/react

Episode 300:
rendering blogs and order them:
note: there are several ways to pass post info to it's card:
1- to pass the post as post={post}
2- to pass each data individually like title={title} author={author} etc.
3- to spread it before passing, and receive each data individually:
in parent: <CardEL {...post} />
in child: function CardEL(props)

Episode 301:
by getting help of this page: https://mui.com/material-ui/react-card/#complex-interaction
we managed to develop CardEL.js as the card of each blog on Home Page.
installing react router dom by : npm i react-router-dom (the links have not been developed yet, but soon they will)

Episode 302:
-developing authors section on home page
->writing the required query to get every data we need(we don't need field or description at this point, so we don't get them)
->export it and use it in Authors.js, and it will be developed exactly like Blogs.js

Episode 303:
-developing authors card using mui
->like blogs, but each row isn't developed in another component

Episode 304:
-developing the routes in app.js, wrapping the whole thing in index.js
exercise: try to develop 2 more pages, where for /blogs, the user sees a list of blogs,
and for /authors, the user sees a list of authors.
-uncommenting the links we commented in 303

Episode 305:
-at first, write the right query to get author detail by slug.
-we get slug from URL using useParams, calling query with it and get single row of data
Note: authors{} in query returns a list with desired conditions,
 but author{} in query return the exact record we need

Episode 306:
nothing special, just styling

Episode 307:
working with richtext:
each richtext has a property called html, which contains the text and the styles.
way1: we can set the DOM by the property innerHTML, but that's deprecated.
React gives a new ability:
        <Grid item size={{ xs: 12 }}>
          <div dangerouslySetInnerHTML={{ __html: description.html }}></div>
        </Grid>
why it is called dangerouslySetInnerHTML?
because from a secure perspective, it's a dangerous action.

way2:using sanitizer:
step1->install the package: npm install sanitize-html
step2->this package will eliminate dangerous XSS attacks.
step3->rewrite the div like this:
        <div
            dangerouslySetInnerHTML={{ __html: sanitizeHTML(description.html) }}
      ></div>
step4->pay attention that scanning the html for Malicious code must be done in back-end,
but we do it here as a double check.

for showing the author's posts section, we reused CardEL.js with minor justification:
we don't need to show the header of the card in author page since it's meaningless,
so instead, we don't pass the author info, and use that lack of info to check what page are we at.
smart, right?

Episode 308:
Loader
Note: make sure any package you get, is compatible with react19;

[2025-08-28]
Episode 309:
